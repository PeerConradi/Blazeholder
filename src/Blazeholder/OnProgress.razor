@using Microsoft.Extensions.Logging
@typeparam TProgress

@if (!state.TaskElement.IsCompleted)
{
    @ChildContent(currentProgress)
}

@code {
    [CascadingParameter] private IBlazeholderState state { get; set; } = null!;
    [Parameter] public RenderFragment<TProgress> ChildContent { get; set; } = default!;

    [Parameter] 
    [EditorRequired]
    public Progress<TProgress> Progress { get; set; } = default!;

    private Progress<TProgress>? currentProgressSource;

    private TProgress currentProgress;


    protected override void OnParametersSet()
    {
        // Logger.LogInformation("Progress parameters have been set on Id: {id}", InitId);
        if (!state.TaskElement.IsCompleted)
        {
            state.TaskElement.ContinueWith((res) => InvokeAsync(StateHasChanged));
            

            if (Progress != null && currentProgressSource != Progress)
            {
                if (currentProgressSource != null)
                {
                    currentProgressSource.ProgressChanged -= Progress_ProgressChanged;
                }

                currentProgressSource = Progress;
                currentProgressSource.ProgressChanged += Progress_ProgressChanged;
            }
        }
        InvokeAsync(StateHasChanged);
    }

    private void Progress_ProgressChanged(object? sender, TProgress e)
    {
        currentProgress = e;
        InvokeAsync(StateHasChanged);
        
        // StateHasChanged();
    }


}